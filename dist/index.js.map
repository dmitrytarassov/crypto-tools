{"version":3,"sources":["../src/index.ts","../src/common/index.ts","../src/common/toBigNumber.ts","../src/common/abbreviateAddress.ts","../src/common/removeLeading0x.ts","../src/polkadot/index.ts","../src/polkadot/api/index.ts","../src/polkadot/api/query/index.ts","../src/polkadot/api/query/proxy/index.ts","../src/polkadot/api/query/proxy/proxies.ts","../src/polkadot/api/query/proxy/palletVersion.ts","../src/polkadot/api/query/system/index.ts","../src/polkadot/api/query/system/account.ts","../src/polkadot/api/query/system/accountNextIndex.ts","../src/polkadot/api/query/system/palletVersion.ts","../src/polkadot/api/query/staking/index.ts","../src/polkadot/api/query/staking/activeEra.ts","../src/polkadot/api/query/staking/bonded.ts","../src/polkadot/api/query/staking/erasRewardPoints.ts","../src/polkadot/api/query/staking/erasValidatorReward.ts","../src/polkadot/api/query/staking/ledger.ts","../src/polkadot/api/query/staking/nominators.ts","../src/polkadot/api/query/staking/palletVersion.ts","../src/polkadot/api/query/staking/validators.ts","../src/polkadot/account/getLedgerData.ts","../src/polkadot/account/getAccountData.ts","../src/polkadot/staking/getController.ts","../src/polkadot/account/getAccountNonce.ts","../src/polkadot/staking/getErasRewardPoints.ts","../src/polkadot/common/polkadotExplorerUrl.ts","../src/polkadot/staking/getActiveEra.ts"],"sourcesContent":["import * as _common from \"./common\";\nimport * as _polkadot from \"./polkadot\";\n\nexport { abbreviateAddress } from \"./common/abbreviateAddress\";\n\nexport const polkadot = _polkadot;\nexport const common = _common;\n","export { toBigNumber } from \"./toBigNumber\";\nexport { abbreviateAddress } from \"./abbreviateAddress\";\nexport { removeLeading0x } from \"./removeLeading0x\";\n","import { BigNumber, BigNumberish } from \"ethers\";\n\nexport function toBigNumber(value: BigNumberish): BigNumber {\n  return BigNumber.from(value);\n}\n","export type Size = {\n  start: number;\n  end: number;\n  include0x?: boolean;\n};\n\nexport type Options = {\n  size: number | [number, number] | Size;\n  symbolsCount?: number;\n  symbol?: string;\n  ignoreList?: string[];\n};\n\nconst defaults = {\n  symbolsCount: 3,\n  size: 4,\n  symbol: \".\",\n};\n\nexport function abbreviateAddress(\n  address: string,\n  options?: Options | number\n): string {\n  if (\n    typeof options === \"object\" &&\n    options.ignoreList &&\n    options?.ignoreList.includes(address)\n  ) {\n    return address;\n  }\n\n  if (\n    typeof options === \"object\" &&\n    typeof options?.size === \"number\" &&\n    options?.size <= 0\n  ) {\n    return address;\n  }\n\n  let _symbolsAtStart = defaults.size;\n  let _symbolsAtEnd = defaults.size;\n  let include0x = false;\n\n  if (typeof options === \"number\") {\n    _symbolsAtStart = options;\n    _symbolsAtEnd = options;\n  } else if (typeof options === \"object\") {\n    if (typeof options?.size === \"number\") {\n      _symbolsAtStart = options.size;\n      _symbolsAtEnd = options.size;\n    } else if (Array.isArray(options?.size)) {\n      const [s, e] = options.size;\n      _symbolsAtStart = s;\n      _symbolsAtEnd = e;\n    } else if (options) {\n      _symbolsAtStart = options.size.start;\n      _symbolsAtEnd = options.size.end;\n      include0x = !!options.size.include0x;\n    }\n  }\n\n  if (!include0x && address.startsWith(\"0x\")) {\n    _symbolsAtStart += 2;\n  }\n\n  const symbolsCount =\n    (typeof options === \"object\" && options?.symbolsCount) ||\n    defaults.symbolsCount;\n  const symbol =\n    typeof options === \"object\" && typeof options?.symbol !== \"undefined\"\n      ? options.symbol\n      : defaults.symbol;\n\n  return `${address.slice(0, _symbolsAtStart)}${symbol.repeat(\n    symbolsCount\n  )}${address.slice(-_symbolsAtEnd)}`;\n}\n","export function removeLeading0x(data: string): string {\n  if (data.startsWith(\"0x\")) {\n    const [, , ...rest] = data;\n    return rest.join(\"\");\n  }\n\n  return data;\n}\n","export { getLedgerData } from \"./account/getLedgerData\";\nexport { getAccountData } from \"./account/getAccountData\";\nexport { getController } from \"./staking/getController\";\nexport {\n  getAccountNonce,\n  getAccountNonceAndBump,\n} from \"./account/getAccountNonce\";\nexport { getErasRewardPoints } from \"./staking/getErasRewardPoints\";\nexport { polkadotExplorerUrl } from \"./common/polkadotExplorerUrl\";\n\nimport * as _getActiveEra from \"./staking/getActiveEra\";\nexport const getActiveEra = _getActiveEra.getActiveEra;\nexport const getCurrentEra = _getActiveEra.getActiveEra;\n\nexport * as api from \"./api\";\n","export * as query from \"./query\";\n","export * as proxy from \"./proxy\";\nexport * as system from \"./system\";\nexport * as staking from \"./staking\";\n","export { proxies } from \"./proxies\";\nexport { palletVersion } from \"./palletVersion\";\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport type Proxy_Proxies_Json = [\n  {\n    delegate: string;\n    proxyType: \"Any\" | \"NonTransfer\" | \"Governance\" | \"Staking\";\n    delay: number;\n  }[],\n  number\n];\n\nexport async function proxies(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Proxy_Proxies_Json> {\n  const proxies = await apiPromise.query.proxy.proxies(address);\n\n  return proxies as unknown as Proxy_Proxies_Json;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport async function palletVersion(apiPromise: ApiPromise): Promise<number> {\n  return (\n    await apiPromise.query.proxy.palletVersion()\n  ).toJSON() as unknown as number;\n}\n","export { account } from \"./account\";\nexport { accountNextIndex } from \"./accountNextIndex\";\nexport { palletVersion } from \"./palletVersion\";\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport type Staking_Account_Json = {\n  nonce: number;\n  consumers: number;\n  providers: number;\n  sufficients: number;\n  data: {\n    free: string;\n    reserved: number;\n    frozen: string;\n    flags: string;\n  };\n};\n\nexport async function account(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Account_Json | null> {\n  const data = await apiPromise.query.system.account(address);\n\n  return data.toJSON() as unknown as Staking_Account_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport async function accountNextIndex(\n  apiPromise: ApiPromise,\n  account: string\n): Promise<number> {\n  const nonce = await apiPromise.rpc.system.accountNextIndex(account);\n\n  return parseInt(nonce.toString(), 10);\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport async function palletVersion(apiPromise: ApiPromise): Promise<number> {\n  return (\n    await apiPromise.query.system.palletVersion()\n  ).toJSON() as unknown as number;\n}\n","export { activeEra } from \"./activeEra\";\nexport { bonded } from \"./bonded\";\nexport { erasRewardPoints } from \"./erasRewardPoints\";\nexport { erasValidatorReward } from \"./erasValidatorReward\";\nexport { ledger } from \"./ledger\";\nexport { nominators } from \"./nominators\";\nexport { palletVersion } from \"./palletVersion\";\nexport { validators } from \"./validators\";\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport type Staking_Active_Era_Json = {\n  index: number;\n  start: number;\n};\n\nexport const activeEra = async (\n  api: ApiPromise\n): Promise<Staking_Active_Era_Json> => {\n  const era = (await api.query.staking.activeEra()).toJSON();\n  return era as unknown as Staking_Active_Era_Json;\n};\n","import { ApiPromise } from \"@polkadot/api\";\nimport { isAddress } from \"@polkadot/util-crypto\";\n\nexport const bonded = async (\n  api: ApiPromise,\n  address: string\n): Promise<string | null> => {\n  if (!isAddress(address)) {\n    throw new Error(`${address} is not an address`);\n  }\n\n  const response = await api.query.staking.bonded(address);\n\n  if (response && response.toString()) {\n    return response.toString();\n  }\n\n  return null;\n};\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport type Staking_Eras_Reward_Points_Json = {\n  total: number;\n  individual: {\n    [validator: string]: number;\n  };\n};\nexport async function erasRewardPoints(\n  apiPromise: ApiPromise,\n  era: number\n): Promise<Staking_Eras_Reward_Points_Json> {\n  if (era < 0) {\n    throw new Error(`Provided Era: ${era} is less than zero`);\n  }\n\n  const points = await apiPromise.query.staking.erasRewardPoints(era);\n  return points.toJSON() as unknown as Staking_Eras_Reward_Points_Json;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport async function erasValidatorReward(\n  apiPromise: ApiPromise,\n  era: number\n): Promise<number | null> {\n  if (era < 0) {\n    throw new Error(`Provided Era: ${era} is less than zero`);\n  }\n\n  const points = await apiPromise.query.staking.erasValidatorReward(era);\n  return points.toJSON() as unknown as number | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport type Staking_Ledger_Json = {\n  stash: string;\n  total: number;\n  active: number;\n  unlocking: string[];\n  legacyClaimedRewards: number[];\n};\n\nexport async function ledger(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Ledger_Json | null> {\n  const data = await apiPromise.query.staking.ledger(address);\n\n  return data.toJSON() as unknown as Staking_Ledger_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport type Staking_Nominators_Json = {\n  targets: string[];\n  submittedIn: number;\n  suppressed: boolean;\n};\n\nexport async function nominators(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Nominators_Json> {\n  const result = await apiPromise.query.staking.nominators(address);\n\n  return result.toJSON() as unknown as Staking_Nominators_Json;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport async function palletVersion(apiPromise: ApiPromise): Promise<number> {\n  return (\n    await apiPromise.query.staking.palletVersion()\n  ).toJSON() as unknown as number;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport type Staking_Validators_Json = {\n  commission: number;\n  blocked: boolean;\n};\n\nexport async function validators(\n  apiPromise: ApiPromise,\n  validatorAddress: string\n): Promise<Staking_Validators_Json> {\n  const result = await apiPromise.query.staking.validators(validatorAddress);\n\n  return result.toJSON() as unknown as Staking_Validators_Json;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nimport * as api from \"../api\";\nimport { Staking_Ledger_Json } from \"../api/query/staking/ledger\";\n\nexport async function getLedgerData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Ledger_Json | null> {\n  return api.query.staking.ledger(apiPromise, address);\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nimport * as api from \"../api\";\nimport { Staking_Account_Json } from \"../api/query/system/account\";\n\nexport async function getAccountData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Account_Json | null> {\n  return api.query.system.account(apiPromise, address);\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nimport * as api from \"../api\";\n\nexport const getController = async (\n  apiPromise: ApiPromise,\n  address: string\n): Promise<string | null> => {\n  return api.query.staking.bonded(apiPromise, address);\n};\n","import { ApiPromise } from \"@polkadot/api\";\n\nimport * as api from \"../api\";\n\ninterface Bump {\n  (): number;\n}\n\nexport async function getAccountNonce(\n  apiPromise: ApiPromise,\n  account: string\n): Promise<number> {\n  return api.query.system.accountNextIndex(apiPromise, account);\n}\n\nexport async function getAccountNonceAndBump(\n  apiPromise: ApiPromise,\n  account: string\n): Promise<[number, Bump]> {\n  const nonce = await getAccountNonce(apiPromise, account);\n\n  let i = 0;\n  return [\n    nonce,\n    () => {\n      i++;\n      return nonce + i;\n    },\n  ];\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nimport * as api from \"../api\";\nimport { Staking_Eras_Reward_Points_Json } from \"../api/query/staking/erasRewardPoints\";\n\nexport async function getErasRewardPoints(\n  apiPromise: ApiPromise,\n  era: number\n): Promise<Staking_Eras_Reward_Points_Json> {\n  return api.query.staking.erasRewardPoints(apiPromise, era);\n}\n","import { Hash } from \"@polkadot/types/interfaces\";\n\ntype LinkType =\n  | \"account\"\n  | \"address\"\n  | \"a\"\n  | \"extrinsic\"\n  | \"transaction\"\n  | \"t\"\n  | \"validator\"\n  | \"v\";\n\nconst linkType: {\n  [key in LinkType]: string;\n} = {\n  account: \"account\",\n  address: \"account\",\n  a: \"account\",\n  extrinsic: \"extrinsic\",\n  transaction: \"extrinsic\",\n  t: \"extrinsic\",\n  validator: \"validator\",\n  v: \"validator\",\n};\n\nexport function polkadotExplorerUrl(\n  networkName: string,\n  domain = \"subscan.io\"\n) {\n  return function (type: LinkType, addressOrHash: string | Hash): string {\n    const value =\n      typeof addressOrHash === \"string\"\n        ? addressOrHash\n        : addressOrHash.toHuman();\n\n    return `https://${networkName.toLowerCase()}.${domain}/${\n      linkType[type]\n    }/${value}`;\n  };\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nimport * as api from \"../api\";\nimport { Staking_Active_Era_Json } from \"../api/query/staking/activeEra\";\n\nexport const getActiveEra = async (\n  apiPromise: ApiPromise\n): Promise<Staking_Active_Era_Json> => {\n  return api.query.staking.activeEra(apiPromise);\n};\n"],"mappings":"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","names":["getActiveEra","proxies","palletVersion","account","palletVersion","palletVersion","palletVersion","account","getActiveEra"]}