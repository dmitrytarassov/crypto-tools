{"version":3,"sources":["../src/common/index.ts","../src/common/toBigNumber.ts","../src/common/abbreviateAddress.ts","../src/common/removeLeading0x.ts","../src/polkadot/index.ts","../src/polkadot/staking/getLedgerData.ts","../src/polkadot/balances/getAccountData.ts","../src/polkadot/staking/getController.ts","../src/polkadot/account/getAccountNonce.ts","../src/polkadot/staking/getErasRewardPoints.ts","../src/polkadot/common/polkadotExplorerUrl.ts","../src/polkadot/staking/getActiveEra.ts","../src/index.ts"],"sourcesContent":["export { toBigNumber } from \"./toBigNumber\";\nexport { abbreviateAddress } from \"./abbreviateAddress\";\nexport { removeLeading0x } from \"./removeLeading0x\";\n","import { BigNumber, BigNumberish } from \"ethers\";\n\nexport function toBigNumber(value: BigNumberish): BigNumber {\n  return BigNumber.from(value);\n}\n","export type Size = {\n  start: number;\n  end: number;\n  include0x?: boolean;\n};\n\nexport type Options = {\n  size: number | [number, number] | Size;\n  symbolsCount?: number;\n  symbol?: string;\n  ignoreList?: string[];\n};\n\nconst defaults = {\n  symbolsCount: 3,\n  size: 4,\n  symbol: \".\",\n};\n\nexport function abbreviateAddress(\n  address: string,\n  options?: Options | number\n): string {\n  if (\n    typeof options === \"object\" &&\n    options.ignoreList &&\n    options?.ignoreList.includes(address)\n  ) {\n    return address;\n  }\n\n  if (\n    typeof options === \"object\" &&\n    typeof options?.size === \"number\" &&\n    options?.size <= 0\n  ) {\n    return address;\n  }\n\n  let _symbolsAtStart = defaults.size;\n  let _symbolsAtEnd = defaults.size;\n  let include0x = false;\n\n  if (typeof options === \"number\") {\n    _symbolsAtStart = options;\n    _symbolsAtEnd = options;\n  } else if (typeof options === \"object\") {\n    if (typeof options?.size === \"number\") {\n      _symbolsAtStart = options.size;\n      _symbolsAtEnd = options.size;\n    } else if (Array.isArray(options?.size)) {\n      const [s, e] = options.size;\n      _symbolsAtStart = s;\n      _symbolsAtEnd = e;\n    } else if (options) {\n      _symbolsAtStart = options.size.start;\n      _symbolsAtEnd = options.size.end;\n      include0x = !!options.size.include0x;\n    }\n  }\n\n  if (!include0x && address.startsWith(\"0x\")) {\n    _symbolsAtStart += 2;\n  }\n\n  const symbolsCount =\n    (typeof options === \"object\" && options?.symbolsCount) ||\n    defaults.symbolsCount;\n  const symbol =\n    typeof options === \"object\" && typeof options?.symbol !== \"undefined\"\n      ? options.symbol\n      : defaults.symbol;\n\n  return `${address.slice(0, _symbolsAtStart)}${symbol.repeat(\n    symbolsCount\n  )}${address.slice(-_symbolsAtEnd)}`;\n}\n","export function removeLeading0x(data: string): string {\n  if (data.startsWith(\"0x\")) {\n    const [, , ...rest] = data;\n    return rest.join(\"\");\n  }\n\n  return data;\n}\n","export { getLedgerData } from \"./staking/getLedgerData\";\nexport { getAccountData } from \"./balances/getAccountData\";\nexport { getController } from \"./staking/getController\";\nexport {\n  getAccountNonce,\n  getAccountNonceAndBump,\n} from \"./account/getAccountNonce\";\nexport { getErasRewardPoints } from \"./staking/getErasRewardPoints\";\nexport { polkadotExplorerUrl } from \"./common/polkadotExplorerUrl\";\n\nimport * as _getActiveEra from \"./staking/getActiveEra\";\nexport const getActiveEra = _getActiveEra.getActiveEra;\nexport const getCurrentEra = _getActiveEra.getActiveEra;\n","import { ApiPromise } from \"@polkadot/api\";\n\ntype Staking_Ledger_Json = {\n  stash: string;\n  total: string;\n  active: string;\n  unlocking: string[];\n  claimedRewards: number[];\n};\n\nexport async function getLedgerData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Ledger_Json | null> {\n  const data = await apiPromise.query.staking.ledger(address);\n\n  return data.toJSON() as unknown as Staking_Ledger_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\ntype Staking_Account_Json = {\n  nonce: number;\n  consumers: number;\n  providers: number;\n  sufficients: number;\n  data: {\n    free: string;\n    reserved: number;\n    frozen: string;\n    flags: string;\n  };\n};\n\nexport async function getAccountData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Account_Json | null> {\n  const data = await apiPromise.query.staking.account(address);\n\n  return data.toJSON() as unknown as Staking_Account_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\nimport { isAddress } from \"@polkadot/util-crypto\";\n\nexport const getController = async (\n  api: ApiPromise,\n  address: string\n): Promise<string | null> => {\n  if (!isAddress(address)) {\n    throw new Error(`${address} is not an address`);\n  }\n\n  const response = await api.query.staking.bonded(address);\n\n  if (response && response.toString()) {\n    return response.toString();\n  }\n\n  return null;\n};\n","import { ApiPromise } from \"@polkadot/api\";\n\ninterface Bump {\n  (): number;\n}\n\nexport async function getAccountNonce(\n  apiPromise: ApiPromise,\n  account: string\n): Promise<number> {\n  const nonce = await apiPromise.rpc.system.accountNextIndex(account);\n\n  return parseInt(nonce.toString(), 10);\n}\n\nexport async function getAccountNonceAndBump(\n  apiPromise: ApiPromise,\n  account: string\n): Promise<[number, Bump]> {\n  const nonce = await getAccountNonce(apiPromise, account);\n\n  let i = 0;\n  return [\n    nonce,\n    () => {\n      i++;\n      return nonce + i;\n    },\n  ];\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\ntype ErasRewardPointsResult = {\n  total: number;\n  individual: {\n    [validator: string]: number;\n  };\n};\nexport async function getErasRewardPoints(apiPromise: ApiPromise, era: number) {\n  if (era < 0) {\n    throw new Error(`Provided Era: ${era} is less than zero`);\n  }\n\n  const points = await apiPromise.query.staking.erasRewardPoints(era);\n  return points.toJSON() as unknown as ErasRewardPointsResult;\n}\n","import { Hash } from \"@polkadot/types/interfaces\";\n\ntype LinkType =\n  | \"account\"\n  | \"address\"\n  | \"a\"\n  | \"extrinsic\"\n  | \"transaction\"\n  | \"t\"\n  | \"validator\"\n  | \"v\";\n\nconst linkType: {\n  [key in LinkType]: string;\n} = {\n  account: \"account\",\n  address: \"account\",\n  a: \"account\",\n  extrinsic: \"extrinsic\",\n  transaction: \"extrinsic\",\n  t: \"extrinsic\",\n  validator: \"validator\",\n  v: \"validator\",\n};\n\nexport function polkadotExplorerUrl(\n  networkName: string,\n  domain = \"subscan.io\"\n) {\n  return function (type: LinkType, addressOrHash: string | Hash): string {\n    const value =\n      typeof addressOrHash === \"string\"\n        ? addressOrHash\n        : addressOrHash.toHuman();\n\n    return `https://${networkName.toLowerCase()}.${domain}/${\n      linkType[type]\n    }/${value}`;\n  };\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\nexport const getActiveEra = async (api: ApiPromise): Promise<number> => {\n  const era = (await api.query.staking.activeEra()).toString();\n  return parseInt(era, 10);\n};\n","import * as _common from \"./common\";\nimport * as _polkadot from \"./polkadot\";\n\nexport { abbreviateAddress } from \"./common/abbreviateAddress\";\n\nexport const polkadot = _polkadot;\nexport const common = _common;\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,SAAS,iBAA+B;AAEjC,SAAS,YAAY,OAAgC;AAC1D,SAAO,UAAU,KAAK,KAAK;AAC7B;;;ACSA,IAAM,WAAW;AAAA,EACf,cAAc;AAAA,EACd,MAAM;AAAA,EACN,QAAQ;AACV;AAEO,SAAS,kBACd,SACA,SACQ;AACR,MACE,OAAO,YAAY,YACnB,QAAQ,cACR,SAAS,WAAW,SAAS,OAAO,GACpC;AACA,WAAO;AAAA,EACT;AAEA,MACE,OAAO,YAAY,YACnB,OAAO,SAAS,SAAS,YACzB,SAAS,QAAQ,GACjB;AACA,WAAO;AAAA,EACT;AAEA,MAAI,kBAAkB,SAAS;AAC/B,MAAI,gBAAgB,SAAS;AAC7B,MAAI,YAAY;AAEhB,MAAI,OAAO,YAAY,UAAU;AAC/B,sBAAkB;AAClB,oBAAgB;AAAA,EAClB,WAAW,OAAO,YAAY,UAAU;AACtC,QAAI,OAAO,SAAS,SAAS,UAAU;AACrC,wBAAkB,QAAQ;AAC1B,sBAAgB,QAAQ;AAAA,IAC1B,WAAW,MAAM,QAAQ,SAAS,IAAI,GAAG;AACvC,YAAM,CAAC,GAAG,CAAC,IAAI,QAAQ;AACvB,wBAAkB;AAClB,sBAAgB;AAAA,IAClB,WAAW,SAAS;AAClB,wBAAkB,QAAQ,KAAK;AAC/B,sBAAgB,QAAQ,KAAK;AAC7B,kBAAY,CAAC,CAAC,QAAQ,KAAK;AAAA,IAC7B;AAAA,EACF;AAEA,MAAI,CAAC,aAAa,QAAQ,WAAW,IAAI,GAAG;AAC1C,uBAAmB;AAAA,EACrB;AAEA,QAAM,eACH,OAAO,YAAY,YAAY,SAAS,gBACzC,SAAS;AACX,QAAM,SACJ,OAAO,YAAY,YAAY,OAAO,SAAS,WAAW,cACtD,QAAQ,SACR,SAAS;AAEf,SAAO,GAAG,QAAQ,MAAM,GAAG,eAAe,CAAC,GAAG,OAAO;AAAA,IACnD;AAAA,EACF,CAAC,GAAG,QAAQ,MAAM,CAAC,aAAa,CAAC;AACnC;;;AC5EO,SAAS,gBAAgB,MAAsB;AACpD,MAAI,KAAK,WAAW,IAAI,GAAG;AACzB,UAAM,CAAC,EAAE,EAAE,GAAG,IAAI,IAAI;AACtB,WAAO,KAAK,KAAK,EAAE;AAAA,EACrB;AAEA,SAAO;AACT;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACUA,eAAsB,cACpB,YACA,SACqC;AACrC,QAAM,OAAO,MAAM,WAAW,MAAM,QAAQ,OAAO,OAAO;AAE1D,SAAO,KAAK,OAAO;AACrB;;;ACFA,eAAsB,eACpB,YACA,SACsC;AACtC,QAAM,OAAO,MAAM,WAAW,MAAM,QAAQ,QAAQ,OAAO;AAE3D,SAAO,KAAK,OAAO;AACrB;;;ACrBA,SAAS,iBAAiB;AAEnB,IAAM,gBAAgB,OAC3B,KACA,YAC2B;AAC3B,MAAI,CAAC,UAAU,OAAO,GAAG;AACvB,UAAM,IAAI,MAAM,GAAG,OAAO,oBAAoB;AAAA,EAChD;AAEA,QAAM,WAAW,MAAM,IAAI,MAAM,QAAQ,OAAO,OAAO;AAEvD,MAAI,YAAY,SAAS,SAAS,GAAG;AACnC,WAAO,SAAS,SAAS;AAAA,EAC3B;AAEA,SAAO;AACT;;;ACZA,eAAsB,gBACpB,YACA,SACiB;AACjB,QAAM,QAAQ,MAAM,WAAW,IAAI,OAAO,iBAAiB,OAAO;AAElE,SAAO,SAAS,MAAM,SAAS,GAAG,EAAE;AACtC;AAEA,eAAsB,uBACpB,YACA,SACyB;AACzB,QAAM,QAAQ,MAAM,gBAAgB,YAAY,OAAO;AAEvD,MAAI,IAAI;AACR,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AACJ;AACA,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AACF;;;ACrBA,eAAsB,oBAAoB,YAAwB,KAAa;AAC7E,MAAI,MAAM,GAAG;AACX,UAAM,IAAI,MAAM,iBAAiB,GAAG,oBAAoB;AAAA,EAC1D;AAEA,QAAM,SAAS,MAAM,WAAW,MAAM,QAAQ,iBAAiB,GAAG;AAClE,SAAO,OAAO,OAAO;AACvB;;;ACHA,IAAM,WAEF;AAAA,EACF,SAAS;AAAA,EACT,SAAS;AAAA,EACT,GAAG;AAAA,EACH,WAAW;AAAA,EACX,aAAa;AAAA,EACb,GAAG;AAAA,EACH,WAAW;AAAA,EACX,GAAG;AACL;AAEO,SAAS,oBACd,aACA,SAAS,cACT;AACA,SAAO,SAAU,MAAgB,eAAsC;AACrE,UAAM,QACJ,OAAO,kBAAkB,WACrB,gBACA,cAAc,QAAQ;AAE5B,WAAO,WAAW,YAAY,YAAY,CAAC,IAAI,MAAM,IACnD,SAAS,IAAI,CACf,IAAI,KAAK;AAAA,EACX;AACF;;;ACrCO,IAAM,eAAe,OAAO,QAAqC;AACtE,QAAM,OAAO,MAAM,IAAI,MAAM,QAAQ,UAAU,GAAG,SAAS;AAC3D,SAAO,SAAS,KAAK,EAAE;AACzB;;;APMO,IAAMC,gBAA6B;AACnC,IAAM,gBAA8B;;;AQPpC,IAAM,WAAW;AACjB,IAAM,SAAS;","names":["getActiveEra","getActiveEra"]}