{"version":3,"sources":["../src/polkadot/index.ts","../src/polkadot/balances/getLedgerData.ts","../src/polkadot/balances/getAccountData.ts","../src/polkadot/staking/getController.ts","../src/common/abbreviateAddress.ts","../src/index.ts"],"sourcesContent":["export { getLedgerData } from \"./balances/getLedgerData\";\nexport { getAccountData } from \"./balances/getAccountData\";\nexport { getController } from \"./staking/getController\";\n","import { ApiPromise } from \"@polkadot/api\";\n\ntype Staking_Ledger_Json = {\n  stash: string;\n  total: string;\n  active: string;\n  unlocking: string[];\n  claimedRewards: number[];\n};\n\nexport async function getLedgerData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Ledger_Json | null> {\n  const data = await apiPromise.query.staking.ledger(address);\n\n  return data.toJSON() as unknown as Staking_Ledger_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\ntype Staking_Account_Json = {\n  nonce: number;\n  consumers: number;\n  providers: number;\n  sufficients: number;\n  data: {\n    free: string;\n    reserved: number;\n    frozen: string;\n    flags: string;\n  };\n};\n\nexport async function getAccountData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Account_Json | null> {\n  const data = await apiPromise.query.staking.account(address);\n\n  return data.toJSON() as unknown as Staking_Account_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\nimport { isAddress } from \"@polkadot/util-crypto\";\n\nexport const getController = async (\n  api: ApiPromise,\n  address: string\n): Promise<string | null> => {\n  if (!isAddress(address)) {\n    throw new Error(`${address} is not an address`);\n  }\n\n  const response = await api.query.staking.bonded(address);\n\n  if (response && response.toString()) {\n    return response.toString();\n  }\n\n  return null;\n};\n","export type Size = {\n  start: number;\n  end: number;\n  include0x?: boolean;\n};\n\nexport type Options = {\n  size: number | [number, number] | Size;\n  symbolsCount?: number;\n  symbol?: string;\n  ignoreList?: string[];\n};\n\nconst defaults = {\n  symbolsCount: 3,\n  size: 4,\n  symbol: \".\",\n};\n\nexport function abbreviateAddress(\n  address: string,\n  options?: Options | number\n): string {\n  if (\n    typeof options === \"object\" &&\n    options.ignoreList &&\n    options?.ignoreList.includes(address)\n  ) {\n    return address;\n  }\n\n  if (\n    typeof options === \"object\" &&\n    typeof options?.size === \"number\" &&\n    options?.size <= 0\n  ) {\n    return address;\n  }\n\n  let _symbolsAtStart = defaults.size;\n  let _symbolsAtEnd = defaults.size;\n  let include0x = false;\n\n  if (typeof options === \"number\") {\n    _symbolsAtStart = options;\n    _symbolsAtEnd = options;\n  } else if (typeof options === \"object\") {\n    if (typeof options?.size === \"number\") {\n      _symbolsAtStart = options.size;\n      _symbolsAtEnd = options.size;\n    } else if (Array.isArray(options?.size)) {\n      const [s, e] = options.size;\n      _symbolsAtStart = s;\n      _symbolsAtEnd = e;\n    } else if (options) {\n      _symbolsAtStart = options.size.start;\n      _symbolsAtEnd = options.size.end;\n      include0x = !!options.size.include0x;\n    }\n  }\n\n  if (!include0x && address.startsWith(\"0x\")) {\n    _symbolsAtStart += 2;\n  }\n\n  const symbolsCount =\n    (typeof options === \"object\" && options?.symbolsCount) ||\n    defaults.symbolsCount;\n  const symbol =\n    typeof options === \"object\" && typeof options?.symbol !== \"undefined\"\n      ? options.symbol\n      : defaults.symbol;\n\n  return `${address.slice(0, _symbolsAtStart)}${symbol.repeat(\n    symbolsCount\n  )}${address.slice(-_symbolsAtEnd)}`;\n}\n","import * as _polkadot from \"./polkadot\";\n\nexport { abbreviateAddress } from \"./common/abbreviateAddress\";\n\nexport const polkadot = _polkadot;\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACUA,eAAsB,cACpB,YACA,SACqC;AACrC,QAAM,OAAO,MAAM,WAAW,MAAM,QAAQ,OAAO,OAAO;AAE1D,SAAO,KAAK,OAAO;AACrB;;;ACFA,eAAsB,eACpB,YACA,SACsC;AACtC,QAAM,OAAO,MAAM,WAAW,MAAM,QAAQ,QAAQ,OAAO;AAE3D,SAAO,KAAK,OAAO;AACrB;;;ACrBA,SAAS,iBAAiB;AAEnB,IAAM,gBAAgB,OAC3B,KACA,YAC2B;AAC3B,MAAI,CAAC,UAAU,OAAO,GAAG;AACvB,UAAM,IAAI,MAAM,GAAG,OAAO,oBAAoB;AAAA,EAChD;AAEA,QAAM,WAAW,MAAM,IAAI,MAAM,QAAQ,OAAO,OAAO;AAEvD,MAAI,YAAY,SAAS,SAAS,GAAG;AACnC,WAAO,SAAS,SAAS;AAAA,EAC3B;AAEA,SAAO;AACT;;;ACLA,IAAM,WAAW;AAAA,EACf,cAAc;AAAA,EACd,MAAM;AAAA,EACN,QAAQ;AACV;AAEO,SAAS,kBACd,SACA,SACQ;AACR,MACE,OAAO,YAAY,YACnB,QAAQ,cACR,SAAS,WAAW,SAAS,OAAO,GACpC;AACA,WAAO;AAAA,EACT;AAEA,MACE,OAAO,YAAY,YACnB,OAAO,SAAS,SAAS,YACzB,SAAS,QAAQ,GACjB;AACA,WAAO;AAAA,EACT;AAEA,MAAI,kBAAkB,SAAS;AAC/B,MAAI,gBAAgB,SAAS;AAC7B,MAAI,YAAY;AAEhB,MAAI,OAAO,YAAY,UAAU;AAC/B,sBAAkB;AAClB,oBAAgB;AAAA,EAClB,WAAW,OAAO,YAAY,UAAU;AACtC,QAAI,OAAO,SAAS,SAAS,UAAU;AACrC,wBAAkB,QAAQ;AAC1B,sBAAgB,QAAQ;AAAA,IAC1B,WAAW,MAAM,QAAQ,SAAS,IAAI,GAAG;AACvC,YAAM,CAAC,GAAG,CAAC,IAAI,QAAQ;AACvB,wBAAkB;AAClB,sBAAgB;AAAA,IAClB,WAAW,SAAS;AAClB,wBAAkB,QAAQ,KAAK;AAC/B,sBAAgB,QAAQ,KAAK;AAC7B,kBAAY,CAAC,CAAC,QAAQ,KAAK;AAAA,IAC7B;AAAA,EACF;AAEA,MAAI,CAAC,aAAa,QAAQ,WAAW,IAAI,GAAG;AAC1C,uBAAmB;AAAA,EACrB;AAEA,QAAM,eACH,OAAO,YAAY,YAAY,SAAS,gBACzC,SAAS;AACX,QAAM,SACJ,OAAO,YAAY,YAAY,OAAO,SAAS,WAAW,cACtD,QAAQ,SACR,SAAS;AAEf,SAAO,GAAG,QAAQ,MAAM,GAAG,eAAe,CAAC,GAAG,OAAO;AAAA,IACnD;AAAA,EACF,CAAC,GAAG,QAAQ,MAAM,CAAC,aAAa,CAAC;AACnC;;;ACxEO,IAAM,WAAW;","names":[]}