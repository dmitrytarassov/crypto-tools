{"version":3,"sources":["../../src/eigenlayer/index.ts","../../src/eigenlayer/constants.ts","../../src/common/toBigNumber.ts","../../src/common/removeLeading0x.ts","../../src/eigenlayer/getOperatorDelegatorsHistory.ts"],"sourcesContent":["export { getOperatorDelegatorsHistory } from \"./getOperatorDelegatorsHistory\";\nexport * as constants from \"./constants\";\n","// EigenLayer: Delegation\n// https://etherscan.io/address/0x39053d51b77dc0d36036fc1fcc8cb819df8ef37a\nexport const EigenLayerDelegationContract =\n  \"0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A\";\n\nexport const OperatorSharesDecreased =\n  \"0x6909600037b75d7b4733aedd815442b5ec018a827751c832aaff64eba5d6d2dd\";\n\nexport const OperatorSharesDecreasedAction = \"OperatorSharesDecreased\";\n\nexport const OperatorSharesIncreased =\n  \"0x1ec042c965e2edd7107b51188ee0f383e22e76179041ab3a9d18ff151405166c\";\n\nexport const OperatorSharesIncreasedAction = \"OperatorSharesIncreased\";\n","import { BigNumber, BigNumberish } from \"ethers\";\n\nexport function toBigNumber(value: BigNumberish): BigNumber {\n  return BigNumber.from(value);\n}\n","export function removeLeading0x(data: string): string {\n  if (data.startsWith(\"0x\")) {\n    const [, , ...rest] = data;\n    return rest.join(\"\");\n  }\n\n  return data;\n}\n","import { BigNumber, ethers } from \"ethers\";\n\nimport {\n  EigenLayerDelegationContract,\n  OperatorSharesDecreased,\n  OperatorSharesDecreasedAction,\n  OperatorSharesIncreased,\n  OperatorSharesIncreasedAction,\n} from \"./constants\";\n\nimport { toBigNumber } from \"../common\";\nimport { removeLeading0x } from \"../common/removeLeading0x\";\n\nfunction parseData(d: string): string[] {\n  let str = d;\n  if (d.startsWith(\"0x\")) {\n    str = removeLeading0x(d);\n  }\n  const arr = [...str];\n  const result: string[] = [];\n  if (arr.length === 0) {\n    return [];\n  } else if (arr.length === 1) {\n    return [str];\n  }\n  let word = \"\";\n  arr.forEach((l) => {\n    word += l;\n    // each 64 bites is new line\n    if (word.length === 64) {\n      result.push(word);\n      word = \"\";\n    }\n  });\n\n  if (word.length > 0) {\n    result.push(word);\n  }\n  return result;\n}\n\nfunction parseAddress(data: string) {\n  const [, addr] = data.split(\"0\".repeat(24));\n  return `0x${addr}`;\n}\n\nasync function getLogs(\n  provider: ethers.providers.JsonRpcProvider,\n  delegationContract: string,\n  operator: string,\n  operation: string,\n  fromBlock?: number,\n  toBlock?: number\n) {\n  return await provider.getLogs({\n    fromBlock: fromBlock ? toBigNumber(fromBlock).toHexString() : undefined,\n    toBlock: toBlock ? toBigNumber(toBlock).toHexString() : undefined,\n    address: delegationContract || EigenLayerDelegationContract,\n    topics: [operation, operator],\n  });\n}\n\ntype OperatorReStakerAction = {\n  amount: BigNumber;\n  block: BigNumber;\n  action:\n    | typeof OperatorSharesDecreasedAction\n    | typeof OperatorSharesIncreasedAction;\n};\n\nfunction parseLogs(\n  logs: ethers.providers.Log[],\n  action: OperatorReStakerAction[\"action\"]\n): Map<string, OperatorReStakerAction[]> {\n  const stakers: Map<string, OperatorReStakerAction[]> = new Map();\n\n  for (const log of logs) {\n    // OperatorSharesIncreased (index_topic_1 address operator, address staker, address strategy, uint256 shares)\n    const data = parseData(log.data);\n\n    const staker = parseAddress(data[0]).toLowerCase();\n    const stakerData = stakers.get(staker) || [];\n\n    stakers.set(staker, [\n      ...stakerData,\n      {\n        amount: toBigNumber(`0x${data[2]}`),\n        block: toBigNumber(log.blockNumber),\n        action,\n      },\n    ]);\n  }\n\n  return stakers;\n}\n\nexport async function getOperatorDelegatorsHistory(\n  provider: ethers.providers.JsonRpcProvider,\n  {\n    fromBlock,\n    toBlock,\n    operator,\n    delegationContract,\n  }: {\n    fromBlock?: number;\n    toBlock?: number;\n    operator: string;\n    delegationContract?: string;\n  }\n): Promise<Map<string, OperatorReStakerAction[]>> {\n  const _operator = `0x${\"0\".repeat(24)}${removeLeading0x(operator)}`;\n\n  const stakers: Map<string, OperatorReStakerAction[]> = new Map();\n\n  const contract = delegationContract || EigenLayerDelegationContract;\n  const increasingLogs = await getLogs(\n    provider,\n    contract,\n    _operator,\n    OperatorSharesIncreased,\n    fromBlock,\n    toBlock\n  );\n\n  const decreasingLogs = await getLogs(\n    provider,\n    contract,\n    _operator,\n    OperatorSharesDecreased,\n    fromBlock,\n    toBlock\n  );\n\n  const increasingActions = parseLogs(\n    increasingLogs,\n    OperatorSharesIncreasedAction\n  );\n\n  const decreasingActions = parseLogs(\n    decreasingLogs,\n    OperatorSharesDecreasedAction\n  );\n\n  const stakersArray = [\n    ...new Set([...increasingActions.keys(), ...decreasingActions.keys()]),\n  ];\n\n  stakersArray.forEach((staker) => {\n    const inc = increasingActions.get(staker) || [];\n    const dec = decreasingActions.get(staker) || [];\n\n    stakers.set(\n      staker,\n      [...inc, ...dec].sort((a, b) => (a.block > b.block ? 1 : -1))\n    );\n  });\n\n  return stakers;\n}\n"],"mappings":"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","names":[]}