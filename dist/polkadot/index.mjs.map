{"version":3,"sources":["../../src/polkadot/balances/getLedgerData.ts","../../src/polkadot/balances/getAccountData.ts","../../src/polkadot/staking/getController.ts","../../src/polkadot/account/getAccountNonce.ts"],"sourcesContent":["import { ApiPromise } from \"@polkadot/api\";\n\ntype Staking_Ledger_Json = {\n  stash: string;\n  total: string;\n  active: string;\n  unlocking: string[];\n  claimedRewards: number[];\n};\n\nexport async function getLedgerData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Ledger_Json | null> {\n  const data = await apiPromise.query.staking.ledger(address);\n\n  return data.toJSON() as unknown as Staking_Ledger_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\n\ntype Staking_Account_Json = {\n  nonce: number;\n  consumers: number;\n  providers: number;\n  sufficients: number;\n  data: {\n    free: string;\n    reserved: number;\n    frozen: string;\n    flags: string;\n  };\n};\n\nexport async function getAccountData(\n  apiPromise: ApiPromise,\n  address: string\n): Promise<Staking_Account_Json | null> {\n  const data = await apiPromise.query.staking.account(address);\n\n  return data.toJSON() as unknown as Staking_Account_Json | null;\n}\n","import { ApiPromise } from \"@polkadot/api\";\nimport { isAddress } from \"@polkadot/util-crypto\";\n\nexport const getController = async (\n  api: ApiPromise,\n  address: string\n): Promise<string | null> => {\n  if (!isAddress(address)) {\n    throw new Error(`${address} is not an address`);\n  }\n\n  const response = await api.query.staking.bonded(address);\n\n  if (response && response.toString()) {\n    return response.toString();\n  }\n\n  return null;\n};\n","import { ApiPromise } from \"@polkadot/api\";\n\ninterface Bump {\n  (): number;\n}\n\nexport async function getAccountNonce(\n  apiPromise: ApiPromise,\n  account: string\n): Promise<number> {\n  const nonce = await apiPromise.rpc.system.accountNextIndex(account);\n\n  return parseInt(nonce.toString(), 10);\n}\n\nexport async function getAccountNonceAndBump(\n  apiPromise: ApiPromise,\n  account: string\n): Promise<[number, Bump]> {\n  const nonce = await getAccountNonce(apiPromise, account);\n\n  let i = 0;\n  return [\n    nonce,\n    () => {\n      i++;\n      return nonce + i;\n    },\n  ];\n}\n"],"mappings":";AAUA,eAAsB,cACpB,YACA,SACqC;AACrC,QAAM,OAAO,MAAM,WAAW,MAAM,QAAQ,OAAO,OAAO;AAE1D,SAAO,KAAK,OAAO;AACrB;;;ACFA,eAAsB,eACpB,YACA,SACsC;AACtC,QAAM,OAAO,MAAM,WAAW,MAAM,QAAQ,QAAQ,OAAO;AAE3D,SAAO,KAAK,OAAO;AACrB;;;ACrBA,SAAS,iBAAiB;AAEnB,IAAM,gBAAgB,OAC3B,KACA,YAC2B;AAC3B,MAAI,CAAC,UAAU,OAAO,GAAG;AACvB,UAAM,IAAI,MAAM,GAAG,OAAO,oBAAoB;AAAA,EAChD;AAEA,QAAM,WAAW,MAAM,IAAI,MAAM,QAAQ,OAAO,OAAO;AAEvD,MAAI,YAAY,SAAS,SAAS,GAAG;AACnC,WAAO,SAAS,SAAS;AAAA,EAC3B;AAEA,SAAO;AACT;;;ACZA,eAAsB,gBACpB,YACA,SACiB;AACjB,QAAM,QAAQ,MAAM,WAAW,IAAI,OAAO,iBAAiB,OAAO;AAElE,SAAO,SAAS,MAAM,SAAS,GAAG,EAAE;AACtC;AAEA,eAAsB,uBACpB,YACA,SACyB;AACzB,QAAM,QAAQ,MAAM,gBAAgB,YAAY,OAAO;AAEvD,MAAI,IAAI;AACR,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AACJ;AACA,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AACF;","names":[]}